name: chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

env:
  MIRROR_URL: "https://github.com/NoxLoveYa/idk-nox.git"
  EXECUTABLES: "test"
  
jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: check_coding_style
        run: |
          check.sh $(pwd) $(pwd)
          if [ -f coding-style-reports.log ]; then
            while read line; do
              offending_file="$(echo "$line" | cut -d':' -f1 | cut -c 3-)"
              offending_line="$(echo "$line" | cut -d':' -f2)"
              error_level="$(echo "$line" | cut -d':' -f3 | cut -c 2-)"
              error_type="$(echo "$line" | cut -d':' -f4)"
              echo "::error file=$offending_file,line=$offending_line::$error_level - $error_type"
            done < coding-style-reports.log
          fi

  check_program_compilation:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: check_program_compilation
        run: |
          make
      - name: clean
        run: |
          make clean
      - name: verify
        run: |
          for executable in $EXECUTABLES; do
            if [ ! -x "$executable" ]; then
              echo "Error: $executable is not executable"
              exit 1
            fi
          done
        timeout-minutes: 2

  run_tests:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: run_tests
        run: |
          make tests_run
        timeout-minutes: 2

  push_to_mirror:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: push_to_mirror
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
